// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package config generated by go-bindata.// sources:
// ../../../../resources/config/app.yaml
// ../../../../resources/i18n/en.yaml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesConfigAppYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xd1\xaa\xdb\x30\x10\x44\xdf\xf5\x15\xfb\x03\x2a\x0e\x97\x0b\x41\x6f\x85\x72\xa1\x4f\x2d\xa5\x3f\xa0\xd8\x63\x5b\x60\x4b\x62\x77\xe5\x34\x7f\x5f\x2c\x39\x69\x13\xb8\x7e\xf3\xcc\xd9\xd1\xec\x0a\x78\x03\x3b\x43\x94\x13\xab\xa3\x73\x77\xee\x8c\x91\xab\x9f\xa6\x26\x47\xbf\xc2\xd1\x10\xa4\x4f\x25\xaa\xf5\x39\x18\x22\xe9\x67\xac\x90\xdd\x27\xb2\x34\xab\x66\x31\x44\x21\x8e\xa9\x69\x1a\x74\x81\xa3\x6f\xc7\x18\xfd\x82\x28\x7d\xfd\xf9\xbd\x9a\x03\xa4\xe7\x90\x35\xa4\xe8\xe8\xf7\x1c\x84\x82\x90\xce\xd8\x01\x62\x48\x4e\x51\xc2\x65\x01\x8d\x89\xa9\x67\x78\xc5\xa3\x00\xfd\xf8\xf8\xa0\xcc\x69\x0d\x02\xa9\x69\x1b\x58\x6a\xd2\xe9\x4b\x67\x4c\x88\xa7\xf3\x5e\x61\xf1\x71\x2a\x7e\x82\x23\x44\x63\x96\x34\x55\x11\x1b\x16\x47\x03\x2e\x65\x32\x66\xf5\x71\xf6\xaa\x3e\xd6\xed\x5b\x64\x6b\x3f\x21\x82\xfd\xd2\x7e\x88\x7c\x19\x82\xda\x76\x88\xcc\x69\xb0\x07\x6c\xab\x71\x40\x45\xc0\x8e\xd2\x38\xda\x97\x5b\xed\x1f\x43\x52\xe1\x1e\x56\x6f\x19\x2f\xd4\x11\x56\xc9\xb6\xec\x23\x1f\x1b\xa2\xde\x5b\xb4\xf7\x9f\x89\xc3\xd2\xb0\x22\x15\x75\xf4\xf6\xde\x1d\x52\x9f\x62\x44\xbf\x9f\xd8\x3e\xdc\xf7\xee\xee\xae\xfe\x8f\xbd\xfa\xf0\x34\xb1\x6b\xff\xa6\xc4\xd1\xa9\xfb\xc4\xb2\x19\x6c\x39\x15\x85\xa3\xb7\xff\x19\x86\x72\xc0\x3e\xfa\x22\xde\xec\x80\xc5\xdf\x2a\x6e\xfe\x06\x00\x00\xff\xff\x78\x8c\x95\x17\x73\x02\x00\x00")

func ResourcesConfigAppYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesConfigAppYaml,
		"../../../../resources/config/app.yaml",
	)
}

func ResourcesConfigAppYaml() (*asset, error) {
	bytes, err := ResourcesConfigAppYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../resources/config/app.yaml", size: 627, mode: os.FileMode(420), modTime: time.Unix(1614801538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ResourcesI18nEnYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xcd\x6e\x23\x37\x0c\xbe\xfb\x29\x78\xd8\x43\x0b\x54\x2f\xe0\x5b\xbb\x41\x81\x14\xdd\x34\xc0\xb6\xd8\x33\x3d\xe2\xd8\x42\x34\xe2\x54\xd2\xc4\x1d\x04\x7e\xf7\x82\x94\x34\x9e\x49\xb2\x4d\xd2\x93\x25\x92\xdf\x47\x8a\x7f\x63\xfa\x67\xbf\x03\x38\x52\xa0\xe8\x3a\x39\x02\xb8\x90\x29\x06\x43\x31\x72\xdc\xc3\xad\xde\x40\x6f\x3f\xc1\xe8\x09\x13\x41\xc7\x21\x63\x97\x21\x9f\x08\xd0\x0e\x2e\x28\x90\x42\x76\x79\x36\x81\xb3\xe9\x79\x0a\x76\x0f\x9f\x9e\x8a\xec\x0e\x07\xba\x2c\xb7\xdb\x9b\x0b\x04\xce\xa0\x46\xbb\x1d\x28\x5d\x64\xef\x29\xb6\x08\x1e\xd1\x3b\x6b\x0e\x6c\x67\x89\x40\x6f\xf0\xdb\xd7\x3f\xee\x54\x1d\xe9\xef\xc9\x45\xb2\x66\xc4\x88\x83\x78\xd1\x43\x71\xe2\xd2\xa2\x17\xea\x31\x52\xa2\x90\x31\x3b\x0e\x5b\xf2\x30\x0d\xf2\x66\x83\x39\x47\x77\x98\x32\x09\x91\x5c\x2a\x4f\xf5\x5a\xcd\x60\x31\x13\x56\xcf\xdd\x43\x61\x9b\x02\x3e\xa2\xf3\x78\xf0\x64\x22\x25\x9e\x62\x47\x7b\xf8\xf3\x44\xd0\x6e\xf0\xd4\x4e\x4b\x80\x02\x6f\xe1\xf1\xe0\x12\x6d\x22\x93\x38\x3a\x9c\x12\x5d\x54\x3a\x52\x76\xd7\xe8\x01\x46\x9c\x07\x0a\xd9\xf0\x28\xd2\xd4\xc4\x02\xef\x78\x18\x31\x3b\x89\xe5\xec\xf2\xc9\xe4\x88\x21\x61\x27\x76\x06\x07\x9e\x42\xde\xc3\x7d\x81\x43\x85\x03\x46\xda\x20\x41\x90\xa0\xc8\x4e\xb3\x06\x05\xb9\xdb\xf5\xce\x67\x8a\xea\xb0\x92\x89\xeb\x72\xd4\xa2\x5f\x49\xf6\xf0\xb3\x8a\xe5\xb1\x52\xe9\x17\xf4\x27\x82\x0e\x87\x11\xdd\x31\x48\x1a\x70\xb2\x8e\x42\x57\xf3\x30\xe2\x4c\xd1\xb8\xa4\xa4\x2e\x64\x36\x4d\x9f\x34\x7e\x8a\x8d\xd7\x85\xd2\x82\x4d\x0d\xdc\xbf\xe0\x6e\x67\x93\x32\xe6\x9a\xae\x8e\xa7\x91\x83\x39\x61\x32\x14\x2c\x69\xca\xf9\x1c\x28\x5e\xaa\x2a\xc1\x09\x13\xa8\x4e\x01\x87\xc9\x1e\x29\xbf\x0a\x28\xaa\x67\xf6\x3d\x3a\x6f\x32\x1b\x2d\x28\x66\xaa\xce\xe1\x57\x74\x1e\x32\x43\x93\x83\xca\x25\x4c\xb9\x95\xe0\xd4\x7e\x79\x7d\xa1\x70\x79\xde\xc3\xe7\x29\x46\x29\x9d\x02\xaf\x19\x68\x0f\x84\x66\x09\x23\x45\xc7\xb6\x92\xcd\x86\x7b\x73\x26\x7a\x30\x18\xac\x39\xf1\x14\xdf\x20\x9f\x25\x8b\x02\x00\x0c\x16\x04\xf0\x7f\x9c\xbd\xd7\xc7\x3b\xa9\xdf\x8c\xfb\xbd\x71\xea\xf4\xce\xe8\xf3\x5c\xb2\x5d\x2f\xc6\xca\x4a\xa8\x4d\xec\x9d\x54\xf8\xf7\xa2\x01\x2b\x5b\xa0\x36\xb1\x68\xae\x2d\x3c\x25\x3c\xea\xa0\xe7\xe8\x74\xca\x84\x7d\xc0\xf8\x40\x79\xf4\xd8\xda\x19\xc0\x25\x63\x5d\xdf\x93\x04\xba\x87\x2f\x57\x03\x58\xc4\xd0\x47\x1e\x5e\xf4\x6e\x9b\xf5\x81\xf2\x89\xed\x32\x1d\x2b\x99\xc6\x9c\x46\xea\x5c\xaf\x41\x7f\x6e\xef\x0e\x0c\xe8\x3d\x9f\xc9\x82\xeb\xe1\x40\xba\x51\x44\x5a\xf1\x50\xf0\xe0\x96\x21\x5d\x58\xbe\xe7\xe6\x9a\x9a\xfb\x2d\xc7\x47\x32\xa4\xd3\xe4\x42\x7a\x25\xe1\xbf\xb8\x90\x3e\xcc\xe5\x52\x9a\x28\xbe\xc2\x76\xab\x8a\x8f\x56\x6f\x8c\x6c\xa7\x2e\xd7\x54\x97\x8b\xa9\xdc\x35\x9f\x7b\xb8\x2f\xf2\xdb\x1b\x65\x6e\x69\xe6\xb0\xa9\x5d\xa2\xe3\xb0\xfd\xf2\x70\x30\x07\x8f\xdd\x83\xf1\x2e\x65\xf9\x48\x70\x22\xdd\xf5\x99\x8e\x1c\xe7\x0b\xfc\xf0\xe9\xe9\x11\xfd\x44\x97\x1f\xa5\x26\xb2\xf9\xae\x7d\xac\x48\x01\x2a\x95\x84\xc3\xc1\x9c\x4f\x2e\x53\xa5\xbb\xe3\x40\x65\xff\x7d\x8f\x36\x35\xde\x4d\x9f\x81\x92\x2c\xcc\x1c\xcc\xd1\xf3\x01\xfd\xc7\x63\x2d\xb8\x55\xa4\x92\x05\xd7\xd6\x9a\x9c\xcc\x76\x12\xbe\xba\xfc\xe6\x08\xc8\x82\x9c\xda\xda\x6e\xab\xbc\x2e\x02\xf9\xb4\x3d\xd2\xaa\xe9\x6b\x27\x17\xb9\xa0\xcf\xe8\x3d\xd5\x6a\x96\xb3\x99\x12\xc5\xb2\x8e\x9f\x35\xcc\x37\xd5\x83\xe8\xab\xd7\xff\x68\x1e\xfd\x46\xbd\x68\xc6\xea\x62\x8c\xdc\x3b\x4f\xaf\xf3\x57\xe5\x87\xb9\x1b\x69\x93\x6f\xa6\x5d\xff\x90\xc9\xf8\xac\x50\xd0\x73\x2c\x7c\x05\xb9\xdb\xc9\x3f\xa1\xf6\x99\x5d\x72\xa9\xff\xfd\xd0\x5f\xc9\xd6\x4a\x8b\xce\xcf\x7b\xb8\x91\x9f\x6b\x59\x56\x06\xb2\xc3\xc5\xe2\x9b\xfe\xbe\x6a\x32\x70\xc8\x27\xb1\xf9\x52\x0e\x6b\x23\x2d\xc6\x12\xc1\x5f\x89\x62\x13\x6e\x3c\x4f\x2b\xc5\x33\x8f\x6b\xd5\x0b\x4f\x55\xd9\xb1\xa5\xd5\x3b\xd9\x52\x13\x6e\xdf\xb7\x52\x3c\x7f\xd7\x4a\xb5\x78\x19\xda\x7b\xd8\xd2\xbf\x01\x00\x00\xff\xff\x5c\x81\x35\x15\x48\x0b\x00\x00")

func ResourcesI18nEnYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesI18nEnYaml,
		"../../../../resources/i18n/en.yaml",
	)
}

func ResourcesI18nEnYaml() (*asset, error) {
	bytes, err := ResourcesI18nEnYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../resources/i18n/en.yaml", size: 2888, mode: os.FileMode(420), modTime: time.Unix(1623716440, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../resources/config/app.yaml":      ResourcesConfigAppYaml,
	"../../../../resources/i18n/en.yaml":         ResourcesI18nEnYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"..": &bintree{nil, map[string]*bintree{
					"resources": &bintree{nil, map[string]*bintree{
						"config": &bintree{nil, map[string]*bintree{
							"app.yaml":      &bintree{ResourcesConfigAppYaml, map[string]*bintree{}},
						}},
						"i18n": &bintree{nil, map[string]*bintree{
							"en.yaml": &bintree{ResourcesI18nEnYaml, map[string]*bintree{}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
